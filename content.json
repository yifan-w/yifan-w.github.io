{"pages":[],"posts":[{"title":"BDD","text":"说起BDD，你会想到什么？ - 林子的空间 BDD解决的问题准确说明开发什么，技术做出的是业务需求方想要的功能，而不是出现以下的场景 场景一：业务分析人员觉得自己分析的需求已经写的很清晰了，并且跟技术人员进行了足够的沟通，可是开发完做Desk check的时候，发现所开发的功能还是跟期望有差距。场景二：开发团队辛辛苦苦开发完一个功能，满怀信心的去给产品经理/客户展示的时候，才发现原来客户需求的功能不是这样的。 BDD是什么BDD关注业务领域，在开始编码之前用DSL写出用例和期望，来描述用户行为，定义业务需求。BDD不关心技术实现，也并非一种工具，不用任何框架也可以实践；强调的是协作方式，要求各角色都参与系统行为的挖掘和定义，以实现对需求的一致理解。 如何编写用例定位用例使用业务语言进行描述，根据业务找出对应的数据流，在数据停留或发生变化的节点进行纵切，提取用例场景 用例格式技术易懂，自动化友好： GIVEN：场景前提条件或初始状态，现在完成时 WHEN：某个动作或某个事件的发生，动词，一般现在时 THEN：should be，期望的结果 好处 关注用户行为 统一术语消除协作沟通障碍 开发进度清晰 活的文档 需求的维护和管理 适合业务复杂、团队成员多、沟通成本高的项目","link":"/2021/02/25/bdd/"},{"title":"火球前三章笔记","text":"火球UML大战需求分析前三章笔记第一章：大话UMLUML不仅仅是软件设计的工具，也能帮助无代码基础的人进行需求分析。UML分为结构型和行为型两类，前者描述在某段时间内稳定的静态结构或关系，后者描述某种动态的行为。 结构型包括：类图，对象图，构件图和部署图等；行为型包括：活动图、状态机图、顺序图和时序图等。 第二章：绞尽脑汁的需求分析工作持续进化的客户需求不同角色的思考倾向和需求分析能力的差异都可能导致项目中的各方对需求理解不一致，而且客户对于需求的认识也在持续进化，导致需求可能经常变更。这其实是一件好事，说明客户对需求的理解在逐步加深，项目组成员不适应则是因为对需求理解的进步程度赶不上客户。 客户在需求的一开始就已经有一定程度的认知，而项目组成员对需求的理解则为零。随着项目的进展，客户和项目组对需求的理解都在加强，但通常项目组对需求的认知总是落后于用户，造成需求分析工作陷入被动，总觉得客户的需求在不断变更。所以项目组对需求的认知需要从一开始的零变成超过客户，这样才能真正理解客户的需要，为客户规划最符合其需要的软件系统。 给客户带来价值客户对于需求往往只有朦胧的、大概的想法，提出来的需求往往只是表面和不全面的，甚至可能互相矛盾。项目组需要透过现象看本质，思考客户的要求背后的根本需求是什么，不是盲从客户的要求。不要做软件的制造者，而是软件价值的创造者；不要被动地接受需求，应该主动出击帮助客户找出真正的需要。 在这个过程中容易混淆需求分析和软件设计，需求分析是为了解决软件有没有用的问题，而软件设计则主要考虑用什么方式和多大成本把软件做出来。 UML助力需求分析结构性UML-结构建模：对业务概念等静态结构进行系统化的梳理和提炼行为型UML-行为建模：对业务流程等动态内容进行系统化的梳理和提炼 第三章：分析业务模型-类图（Class Diagram）类图的基础知识使用类图获取需求的步骤： 识别出类 识别出类的主要属性 描绘出类之间的关系 对各类进行分析、抽象、整理 类之间的关系 关联关系（Association）：直线，两端数字代表数量映射关系，e.g. 1 - 0..3，一个左对应0到3个右 导航关系：箭头表示方向，e.g. A -&gt; B，由A可导航到B 包含关系： 弱包含（聚合，Aggregation）：空心菱形，没有包含关系也能存在，只能被一个类包含 强包含（组合，Composition）：实心菱形，没有包含关系不再存在，可以被多个类包含 继承关系（泛化，Generalization）：空心三角形箭头，A继承B是A泛化为B 依赖关系：虚线加箭头，并非指没有依赖就不能存在 递归关系：指向自己的关系 三角关系：关联类（Association Class），从关联关系上拉出一条虚线指向的类，表示关联类依赖于另外两个类之间的关系而存在","link":"/2021/02/25/%E7%81%AB%E7%90%83%E5%89%8D%E4%B8%89%E7%AB%A0%E7%AC%94%E8%AE%B0/"}],"tags":[],"categories":[]}